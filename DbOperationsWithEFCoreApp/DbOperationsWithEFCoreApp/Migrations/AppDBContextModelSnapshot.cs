// <auto-generated />
using System;
using DbOperationsWithEFCoreApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbOperationsWithEFCoreApp.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.AppoitnmentReasonsList", b =>
                {
                    b.Property<string>("REASON_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("bit");

                    b.Property<string>("REASON_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clinic_Code")
                        .HasColumnType("int");

                    b.HasKey("REASON_ID");

                    b.HasIndex("clinic_Code");

                    b.ToTable("ReasonsAppointment");

                    b.HasData(
                        new
                        {
                            REASON_ID = "1",
                            Created_By = "",
                            Created_Date = "",
                            Is_Active = true,
                            REASON_NAME = "WELL VISIT",
                            clinic_Code = 1
                        },
                        new
                        {
                            REASON_ID = "2",
                            Created_By = "",
                            Created_Date = "",
                            Is_Active = true,
                            REASON_NAME = "EMPLOYEE PHYSICAL",
                            clinic_Code = 1
                        },
                        new
                        {
                            REASON_ID = "3",
                            Created_By = "",
                            Created_Date = "",
                            Is_Active = true,
                            REASON_NAME = "ACCIDENT CASE",
                            clinic_Code = 1
                        },
                        new
                        {
                            REASON_ID = "4",
                            Created_By = "",
                            Created_Date = "",
                            Is_Active = true,
                            REASON_NAME = "INITIAL VISIT",
                            clinic_Code = 1
                        },
                        new
                        {
                            REASON_ID = "5",
                            Created_By = "",
                            Created_Date = "",
                            Is_Active = true,
                            REASON_NAME = "VACCINATIONS",
                            clinic_Code = 1
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.CellNo_Types", b =>
                {
                    b.Property<int>("PHONE_CODE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PHONE_CODE"));

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("bit");

                    b.Property<string>("PHONE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PHONE_CODE");

                    b.ToTable("CellNo_Types");

                    b.HasData(
                        new
                        {
                            PHONE_CODE = 5001,
                            Created_By = "Sumair",
                            Created_Date = "2018-05-09 15:09:54.3030000",
                            Is_Active = true,
                            PHONE_TYPE = "HOME"
                        },
                        new
                        {
                            PHONE_CODE = 5002,
                            Created_By = "Sumair",
                            Created_Date = "2018-05-09 15:09:54.3030000",
                            Is_Active = true,
                            PHONE_TYPE = "OFFICE"
                        },
                        new
                        {
                            PHONE_CODE = 5003,
                            Created_By = "Sumair",
                            Created_Date = "2018-05-09 15:09:54.3030000",
                            Is_Active = true,
                            PHONE_TYPE = "CELL"
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Clinic_Types", b =>
                {
                    b.Property<string>("clinic_Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("clinic_Type_Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clinic_Type");

                    b.ToTable("Clinics_Types");

                    b.HasData(
                        new
                        {
                            clinic_Type = "G",
                            clinic_Type_Description = "Group"
                        },
                        new
                        {
                            clinic_Type = "I",
                            clinic_Type_Description = "Individual"
                        },
                        new
                        {
                            clinic_Type = "S",
                            clinic_Type_Description = "Supplier"
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Clinics", b =>
                {
                    b.Property<int>("clinic_Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clinic_Code"));

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("bit");

                    b.Property<string>("Location_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office_Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PHONE_CODE")
                        .HasColumnType("int");

                    b.Property<string>("PHONE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_Alternate_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_LICENSE_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_Tax_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("clinic_URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("clinic_Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clinic_Code");

                    b.HasIndex("PHONE_CODE");

                    b.HasIndex("clinic_Type");

                    b.ToTable("Clinics");

                    b.HasData(
                        new
                        {
                            clinic_Code = 1,
                            County = "LmK",
                            Created_By = "Sumair",
                            Created_Date = "2018-05-09 15:09:54.3030000",
                            Email_Address = "muhammadislam@carecloud.com",
                            Is_Active = true,
                            Location_Number = "",
                            Office_Manager = "",
                            PHONE_CODE = 5001,
                            PHONE_TYPE = "",
                            clinic_Address = "Test",
                            clinic_Alternate_Phone = "",
                            clinic_City = "Test",
                            clinic_LICENSE_NUMBER = "MA64146",
                            clinic_Name = "Test",
                            clinic_Phone = "",
                            clinic_State = "Test",
                            clinic_Tax_Id = "",
                            clinic_Type = "I",
                            clinic_URL = "http://www.mhaqmd.com",
                            clinic_Zip = "1"
                        },
                        new
                        {
                            clinic_Code = 2,
                            County = "LmK",
                            Created_By = "Sumair",
                            Created_Date = "2018-05-09 15:09:54.3030000",
                            Email_Address = "muhammadislam@carecloud.com",
                            Is_Active = true,
                            Location_Number = "",
                            Office_Manager = "",
                            PHONE_CODE = 5001,
                            PHONE_TYPE = "",
                            clinic_Address = "Test",
                            clinic_Alternate_Phone = "",
                            clinic_City = "Test",
                            clinic_LICENSE_NUMBER = "MA64146",
                            clinic_Name = "MTBC Test",
                            clinic_Phone = "",
                            clinic_State = "Test",
                            clinic_Tax_Id = "",
                            clinic_Type = "I",
                            clinic_URL = "http://www.mhaqmd.com",
                            clinic_Zip = "1"
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.DoctorHoliday", b =>
                {
                    b.Property<int>("DoctorHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorHolidayId"));

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Created_Date")
                        .HasColumnType("date");

                    b.Property<string>("DoctorsCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("HOLIDAYSHoliday_id")
                        .HasColumnType("int");

                    b.Property<int>("Holiday_id")
                        .HasColumnType("int");

                    b.Property<bool>("IsWorkingDay")
                        .HasColumnType("bit");

                    b.Property<int>("LocationCode")
                        .HasColumnType("int");

                    b.Property<int>("clinic_Code")
                        .HasColumnType("int");

                    b.HasKey("DoctorHolidayId");

                    b.HasIndex("DoctorsCode");

                    b.HasIndex("HOLIDAYSHoliday_id");

                    b.HasIndex("Holiday_id");

                    b.HasIndex("LocationCode");

                    b.HasIndex("clinic_Code");

                    b.ToTable("DoctorHoliday");

                    b.HasData(
                        new
                        {
                            DoctorHolidayId = 1,
                            Created_By = "System",
                            Created_Date = new DateOnly(2025, 10, 10),
                            DoctorsCode = "1",
                            Holiday_id = 1,
                            IsWorkingDay = true,
                            LocationCode = 1,
                            clinic_Code = 1
                        },
                        new
                        {
                            DoctorHolidayId = 2,
                            Created_By = "System",
                            Created_Date = new DateOnly(2025, 10, 10),
                            DoctorsCode = "1",
                            Holiday_id = 1,
                            IsWorkingDay = false,
                            LocationCode = 1,
                            clinic_Code = 1
                        },
                        new
                        {
                            DoctorHolidayId = 3,
                            Created_By = "System",
                            Created_Date = new DateOnly(2025, 10, 10),
                            DoctorsCode = "1",
                            Holiday_id = 1,
                            IsWorkingDay = false,
                            LocationCode = 1,
                            clinic_Code = 1
                        },
                        new
                        {
                            DoctorHolidayId = 4,
                            Created_By = "System",
                            Created_Date = new DateOnly(2025, 10, 10),
                            DoctorsCode = "1",
                            Holiday_id = 1,
                            IsWorkingDay = true,
                            LocationCode = 1,
                            clinic_Code = 1
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.DoctorYearlyHoliday", b =>
                {
                    b.Property<int>("DoctorYearlyHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorYearlyHolidayId"));

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Created_Date")
                        .HasColumnType("date");

                    b.Property<string>("DoctorsCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Holiday_From")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Holiday_To")
                        .HasColumnType("date");

                    b.Property<DateOnly>("Holiday_date")
                        .HasColumnType("date");

                    b.Property<int>("Holiday_id")
                        .HasColumnType("int");

                    b.Property<string>("Holiday_title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationCode")
                        .HasColumnType("int");

                    b.Property<int>("clinic_Code")
                        .HasColumnType("int");

                    b.HasKey("DoctorYearlyHolidayId");

                    b.HasIndex("DoctorsCode");

                    b.HasIndex("Holiday_id");

                    b.HasIndex("LocationCode");

                    b.HasIndex("clinic_Code");

                    b.ToTable("DoctorYearlyHoliday");

                    b.HasData(
                        new
                        {
                            DoctorYearlyHolidayId = 1,
                            Created_By = "System",
                            Created_Date = new DateOnly(2025, 10, 14),
                            DoctorsCode = "1",
                            Holiday_From = new DateOnly(2026, 2, 5),
                            Holiday_To = new DateOnly(2026, 2, 5),
                            Holiday_date = new DateOnly(2026, 2, 5),
                            Holiday_id = 1,
                            Holiday_title = "Kashmir Sloidarity Day",
                            LocationCode = 1,
                            clinic_Code = 1
                        },
                        new
                        {
                            DoctorYearlyHolidayId = 2,
                            Created_By = "System",
                            Created_Date = new DateOnly(2025, 10, 14),
                            DoctorsCode = "1",
                            Holiday_From = new DateOnly(2026, 2, 21),
                            Holiday_To = new DateOnly(2026, 2, 21),
                            Holiday_date = new DateOnly(2026, 2, 21),
                            Holiday_id = 2,
                            Holiday_title = "Eid Fitar",
                            LocationCode = 1,
                            clinic_Code = 1
                        },
                        new
                        {
                            DoctorYearlyHolidayId = 3,
                            Created_By = "System",
                            Created_Date = new DateOnly(2025, 10, 14),
                            DoctorsCode = "1",
                            Holiday_From = new DateOnly(2026, 5, 27),
                            Holiday_To = new DateOnly(2026, 5, 27),
                            Holiday_date = new DateOnly(2026, 5, 27),
                            Holiday_id = 4,
                            Holiday_title = "Eid Azha",
                            LocationCode = 1,
                            clinic_Code = 1
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Doctor_Working_Days_Time", b =>
                {
                    b.Property<int>("Doctor_Working_Days_Time_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Doctor_Working_Days_Time_ID"));

                    b.Property<DateTime>("Break_Time_From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Break_Time_To")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Created_Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("Date_From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_To")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorsCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("Enable_Break")
                        .HasColumnType("bit");

                    b.Property<int>("LocationCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time_From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Time_To")
                        .HasColumnType("datetime2");

                    b.Property<string>("Weekday_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clinic_Code")
                        .HasColumnType("int");

                    b.HasKey("Doctor_Working_Days_Time_ID");

                    b.HasIndex("DoctorsCode");

                    b.HasIndex("LocationCode");

                    b.HasIndex("clinic_Code");

                    b.ToTable("Doctor_Working_Days_Time");

                    b.HasData(
                        new
                        {
                            Doctor_Working_Days_Time_ID = 1,
                            Break_Time_From = new DateTime(2025, 10, 14, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Break_Time_To = new DateTime(2025, 10, 8, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Created_By = "System",
                            Created_Date = new DateOnly(2025, 10, 10),
                            Date_From = new DateTime(2025, 10, 14, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Date_To = new DateTime(2025, 10, 14, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            DoctorsCode = "1",
                            Duration = 60,
                            Enable_Break = true,
                            LocationCode = 1,
                            Time_From = new DateTime(2025, 10, 14, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Time_To = new DateTime(2025, 10, 14, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Weekday_Id = "1",
                            clinic_Code = 1
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Doctors", b =>
                {
                    b.Property<string>("DoctorsCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date_Of_Birth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorsPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("bit");

                    b.Property<string>("License_No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clinic_Code")
                        .HasColumnType("int");

                    b.HasKey("DoctorsCode");

                    b.HasIndex("clinic_Code");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorsCode = "1",
                            Address = "",
                            City = "",
                            Created_By = "",
                            Created_Date = "",
                            Date_Of_Birth = "",
                            DoctorsName = "Zafar",
                            DoctorsPrefix = "",
                            Email_Address = "",
                            Gender = "",
                            Is_Active = true,
                            License_No = "",
                            State = "",
                            Zip = "",
                            clinic_Code = 1
                        },
                        new
                        {
                            DoctorsCode = "2",
                            Address = "",
                            City = "",
                            Created_By = "",
                            Created_Date = "",
                            Date_Of_Birth = "",
                            DoctorsName = "Sara",
                            DoctorsPrefix = "",
                            Email_Address = "",
                            Gender = "",
                            Is_Active = true,
                            License_No = "",
                            State = "",
                            Zip = "",
                            clinic_Code = 1
                        },
                        new
                        {
                            DoctorsCode = "3",
                            Address = "",
                            City = "",
                            Created_By = "",
                            Created_Date = "",
                            Date_Of_Birth = "",
                            DoctorsName = "Iqbal",
                            DoctorsPrefix = "",
                            Email_Address = "",
                            Gender = "",
                            Is_Active = true,
                            License_No = "",
                            State = "",
                            Zip = "",
                            clinic_Code = 1
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.HOLIDAYS", b =>
                {
                    b.Property<int>("Holiday_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Holiday_id"));

                    b.Property<string>("Holiday_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Holiday_date")
                        .HasColumnType("date");

                    b.HasKey("Holiday_id");

                    b.ToTable("HOLIDAYS");

                    b.HasData(
                        new
                        {
                            Holiday_id = 1,
                            Holiday_Title = "Kashmir Sloidarity Day",
                            Holiday_date = new DateOnly(2026, 2, 5)
                        },
                        new
                        {
                            Holiday_id = 2,
                            Holiday_Title = "Eid Fitar",
                            Holiday_date = new DateOnly(2026, 2, 21)
                        },
                        new
                        {
                            Holiday_id = 3,
                            Holiday_Title = "Labour Day",
                            Holiday_date = new DateOnly(2026, 5, 1)
                        },
                        new
                        {
                            Holiday_id = 4,
                            Holiday_Title = "Eid Azha",
                            Holiday_date = new DateOnly(2026, 5, 27)
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Location", b =>
                {
                    b.Property<int>("LocationCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationCode"));

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created_Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("bit");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_Zip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clinic_Code")
                        .HasColumnType("int");

                    b.HasKey("LocationCode");

                    b.HasIndex("clinic_Code");

                    b.ToTable("DoctorLocations");

                    b.HasData(
                        new
                        {
                            LocationCode = 1,
                            Is_Active = false,
                            LocationName = "Karachi",
                            clinic_Code = 1
                        },
                        new
                        {
                            LocationCode = 2,
                            Is_Active = false,
                            LocationName = "Lahore",
                            clinic_Code = 2
                        });
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.AppoitnmentReasonsList", b =>
                {
                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Clinics", "clinic_Codes")
                        .WithMany("AppoitnmentReasons")
                        .HasForeignKey("clinic_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clinic_Codes");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Clinics", b =>
                {
                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.CellNo_Types", "PHONE_CODES")
                        .WithMany("Clinics")
                        .HasForeignKey("PHONE_CODE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Clinic_Types", "Clinic_Types")
                        .WithMany("Clinics")
                        .HasForeignKey("clinic_Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic_Types");

                    b.Navigation("PHONE_CODES");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.DoctorHoliday", b =>
                {
                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Doctors", "DoctorsCodes")
                        .WithMany()
                        .HasForeignKey("DoctorsCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.HOLIDAYS", null)
                        .WithMany("DoctorHolidays")
                        .HasForeignKey("HOLIDAYSHoliday_id");

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.HOLIDAYS", "Holiday_ids")
                        .WithMany()
                        .HasForeignKey("Holiday_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Location", "LocationCodes")
                        .WithMany()
                        .HasForeignKey("LocationCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Clinics", "clinic_Codes")
                        .WithMany()
                        .HasForeignKey("clinic_Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorsCodes");

                    b.Navigation("Holiday_ids");

                    b.Navigation("LocationCodes");

                    b.Navigation("clinic_Codes");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.DoctorYearlyHoliday", b =>
                {
                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Doctors", "DoctorsCodes")
                        .WithMany()
                        .HasForeignKey("DoctorsCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.HOLIDAYS", "Holiday_ids")
                        .WithMany()
                        .HasForeignKey("Holiday_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Location", "LocationCodes")
                        .WithMany()
                        .HasForeignKey("LocationCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Clinics", "clinic_Codes")
                        .WithMany()
                        .HasForeignKey("clinic_Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorsCodes");

                    b.Navigation("Holiday_ids");

                    b.Navigation("LocationCodes");

                    b.Navigation("clinic_Codes");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Doctor_Working_Days_Time", b =>
                {
                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Doctors", "DoctorsCodes")
                        .WithMany()
                        .HasForeignKey("DoctorsCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Location", "LocationCodes")
                        .WithMany()
                        .HasForeignKey("LocationCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Clinics", "clinic_Codes")
                        .WithMany()
                        .HasForeignKey("clinic_Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorsCodes");

                    b.Navigation("LocationCodes");

                    b.Navigation("clinic_Codes");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Doctors", b =>
                {
                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Clinics", "clinic_Codes")
                        .WithMany("Doctors")
                        .HasForeignKey("clinic_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clinic_Codes");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Location", b =>
                {
                    b.HasOne("DbOperationsWithEFCoreApp.Core.Entities.Clinics", "clinic_Codes")
                        .WithMany("DoctorLocations")
                        .HasForeignKey("clinic_Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clinic_Codes");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.CellNo_Types", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Clinic_Types", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.Clinics", b =>
                {
                    b.Navigation("AppoitnmentReasons");

                    b.Navigation("DoctorLocations");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DbOperationsWithEFCoreApp.Core.Entities.HOLIDAYS", b =>
                {
                    b.Navigation("DoctorHolidays");
                });
#pragma warning restore 612, 618
        }
    }
}
